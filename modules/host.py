#!/usr/bin/env python3
import yaml, sys, argparse, os, re, logging, subprocess

"""
Manage host network, boot, etc. settings
"""
class Host():
    _fp_autostart = '~/.config/lxsession/LXDE-pi/autostart'
    _bluetooth_mac = None

    def __init__(self, node, host_cfg):
        self.cfg = host_cfg
        self.node = node
        self.log = node.log
        self.exec = node.exec
        self.cluster = node.cluster
        if not self.cfg: return

        self.kiosk = self.cfg['kiosk']
        self.rpi = self.cfg['rpi']
        self.network = self.cfg['network']
        self.nfs = self.cfg['nfs']
        if self.kiosk:
            self.url_slug = self.kiosk["url_slug"] if self.kiosk["url_slug"] else self.node.name
            self.url = f'{self.kiosk["url_base"]}{self.url_slug}'
            if len(self.kiosk["url_query_params"]) > 0:
                qps = "&".join(self.kiosk["url_query_params"])
                self.url += f'?{qps}'
        self.log.debug(f'loaded host at {node.user_address}')

    # Return the MAC addr of the bluetooth, if available
    def _get_bt_mac_addr(self):
        if not self._bluetooth_mac:
            cmd = 'hcitool dev | grep -o "[[:xdigit:]:]\\\{11,17\\\}"'
            self._bluetooth_mac = self.exec(cmd, capture_output=True).stdout
        return self._bluetooth_mac

    # Add a bash line to the autostart file
    def _autostart(self, bash):
        self.log.info(f'adding startup command `{bash}`...')
        bash = bash.replace('\'', '\\\'')
        self.exec(f'echo \'{bash}\' >> autostart.sh')

    # Set hostname & IP
    def create(self):
        if self.network:
            self.log.info('setting up hostname & network interface...')
            self._upload_host_script('setup-network.sh')
            args = f'"{self.node.name}" "{self.node.address}"'
            args += ' "' + self.network['dns'] +'"'
            args += ' "' + self.network['interface'] +'"'
            self.exec(f'bash ./setup-network.sh {args}')

        if self.kiosk:
            self.log.info(f'installing xscreensaver...')
            self.node._apt(f'apt-get install', 'xscreensaver unclutter')
        # else:
        #     self.log.info(f'removing xscreensaver...')
        #     self.node._apt(f'apt-get remove', 'xscreensaver unclutter')
        #     self.node.exec('rm .xscreensaver || true')
        #     self.node.exec(f'rm kiosk.sh || true')

    def configure(self):
        self._configure_nfs()

        if not self.rpi and not self.kiosk: return

        # Set up startup scirpt
        self.node._upload_host_script('autostart.sh')
        self.node._upload_host_script('startup.sh')
        self.node.exec('chmod +x autostart.sh')

        startup_flags = []
        if self.rpi:
            if not self.rpi['usb_ethernet']: startup_flags.append('--no-usb_ethernet')
            if not self.rpi['hdmi']: startup_flags.append('--no-hdmi')
        startup_flags = " ".join(startup_flags)

        self.exec(f'mkdir -p {os.path.dirname(self._fp_autostart)}')
        self.exec(f'echo "@bash /home/pi/startup.sh {startup_flags}" > {self._fp_autostart}')

        self._configure_kiosk()

    # https://vitux.com/install-nfs-server-and-client-on-ubuntu/
    def _configure_nfs(self):
        if not self.nfs: return

        nfs_path = self.nfs['directory']
        self.log.info(f'installing nfs at {nfs_path}...')
        self.exec('sudo apt install nfs-kernel-server')
        self.exec(f'sudo mkdir -p {nfs_path}')
        self.exec(f'sudo chown nobody:nogroup {nfs_path}')
        self.exec(f'sudo chmod 777 {nfs_path}')
        exports = ["# Generated by tiny-cluster"]
        for ip in self.cfg['nfs']['allow_ips']:
            permissions = ",".join(self.cfg['nfs']['allow_ips'][ip])
            self.log.info(f'granting {permissions} to {ip} at {nfs_path}...')
            exports.append(f'{nfs_path} {ip}({permissions})')
        exports = "\n".join(exports)
        self.exec(f'echo "{exports}" | sudo tee /etc/exports > /dev/null')
        self.exec(f'sudo exportfs -a')
        self.exec(f'sudo systemctl restart nfs-kernel-server')

    def _configure_kiosk(self):
        if not self.kiosk: return

        self.node._upload_host_script('kiosk.sh')
        self.node.exec('chmod +x kiosk.sh')

        self._autostart('xscreensaver &')
        if self.kiosk['unclutter']:
            self._autostart(f'unclutter -idle {self.kiosk["unclutter"]} -root &')

        self.log.info(f'configuring xscreensaver...')
        self.node._upload_host_script('.xscreensaver')

        xss = self.kiosk['xscreensaver']
        self.node.exec(f'sed -i "s/TIMEOUT/{xss["timeout"]}/g" .xscreensaver')
        self.node.exec(f'sed -i "s/MODE/{xss["mode"]}/g" .xscreensaver')

        self.log.info(f'setting kiosk url: "{self.url}"...')
        self._autostart(f'{self.node.dir_home}/kiosk.sh "{self.url}" -f "{self.kiosk["chromium_flags"]}"')
